GoLangPhilly - Writing a slack bot in Go
Slackbot in go, running on Google AppEngine
8 Sep 2015
Tags: golang, slack, appengine

Darrel Herbst
DramaFever
dherbst@gmail.com
http://github.com/dherbst
@darrelherbst

* GoLangPhilly - Writing a slack bot in go

This talk explains how to run a slackbot written in go on AppEngine

.image slack.png



* Slack - is a chat site like irc

- has channels
- can be public or private
- has mobile apps; android/iOS
- history
- searchable
- allows you to create your own integrations.
 1. Create a /command which sends info from slack to your site via a web url
 2. Create a bot user which sees all messages in the channel
 3. Send a message from your site to slack via a web url

* Config a command to send information to your site

.image integration.png

Choose "make your own"

.image command.png

* The url for slack to send you info

.image config.png

* Now you need a site to receive the post, and return something

.image appengine.png

Download the go sdk for appengine at [[https://cloud.google.com/appengine/docs/go/]]

Get started quickly by creating

- app.yaml
- handlers.go
- static folder for index.html, images, etc.

* app.yaml is where you define your application

.code ../www/app.yaml

* handlers.go

Create handlers.go with an `init` function

.code ../www/handlers.go /^package/,/^}/

* api.go holds the `CommandHandler`

.code ../www/api.go /^\/\/ Dispatch the command/,/^}/

* Convert the request into a struct:

.code ../www/api.go /^\/\/ UnMarshalCommand takes/,/^}/

* Dispatch the SlackCommand to the ProcessCommand function

.code ../www/api.go /^\/\/ Dispatch the command based on the parameter/,/^}/

* ProcessCommand examines the SlackCommand and performs an action on it

.code ../www/api.go /^\/\/ Determine what do to with the different text commands/,/^}/

* Say hi, slackbot

.code ../www/api.go /^\/\/ HelloCommand says hi back to the user that said hello/,/^}/

.image hellocommand.png

.image hellocommandresult.png

* So how do you talk to the #channel?

Slack slash-commands return text as the body of the response.  Only the person calling
the slash-command sees the response.

If you want your bot to say something everyone can see, you need to call back the web
incoming url to the channel the command is coming from.

_Or_you_can_implement_a_full_bot_that_has_the_ability_to_be_in_every_room_ but that is beyond the scope of this talk.
